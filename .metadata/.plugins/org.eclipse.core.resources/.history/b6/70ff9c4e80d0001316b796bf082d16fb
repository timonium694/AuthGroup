package edu.neumont.csc380.hello.service;
import java.io.IOException;

import javax.ws.rs.PathParam;
import javax.ws.rs.core.Response;
import javax.ws.rs.core.Response.Status;

import org.springframework.stereotype.Service;

import edu.neumont.csc380.auth.Authorization.AuthorityLevel;
import edu.neumont.csc380.auth.Authorization.Encryptor;
import edu.neumont.csc380.auth.interfaces.IAuthService;
import edu.neumont.csc380.exceptions.UserDoesNotExistException;

@Service("authService")
public class AuthServiceImpl implements IAuthService {
private UserFactory userFactory = new UserFactory();
private Encryptor encryptor = new Encryptor();
	
	public void deleteUser(String username) throws UserDoesNotExistException {
		if(!userFactory.deleteUser(username))
		{
			throw new UserDoesNotExistException();
		}
	}

	public Response createUser(AuthCredentialsV1 streetCred)
	{
		Response response = null;
			User u = new User();
			u.setAuthLevel(streetCred.getUpdatedAuthLevel());
			u.setPassword(streetCred.getPassword());
			u.setUsername(streetCred.getUserName());
			userFactory.createNewUser(u);
			AuthUser authUser = new AuthUser(u.getId(), u.getAuthLevel(),u.getUsername(),20);
			String message = "User " + u.getUsername() + " with the user id " + u.getId() + " and the authority level " + u.getAuthLevel() + " has been created";
			
			try {
				Encryptor encryptor = new Encryptor();
				response = Response.ok(encryptor.encryptUser(authUser, message)).build();
			} catch (Exception e) {
				response = Response.status(500).entity("There was a problem with the encryption of the user").build();
				e.printStackTrace();
			}
			finally
			{
				return response;
			}
	}

	public Response updateUserPassword(AuthCredentialsV1 streetCred) throws UserDoesNotExistException, IOException
	{
		User user = userFactory.updateUserPass(streetCred.getUserName(), streetCred.getPassword(),streetCred.getExtraData());
		if(user == null)
		{
			throw new UserDoesNotExistException();
		}
		AuthUser authUser = new AuthUser(user.getId(), user.getAuthLevel(), user.getUsername(), 20);
		return Response.ok(encryptor.encryptUser(authUser, "User " + streetCred.getUserName() + " has updated thier password.")).build();
	}


	public Response authorizeUser(AuthCredentialsV1 streetCred) throws UserDoesNotExistException, IOException
	{
		if(!userFactory.deleteUser(streetCred.getUserName()))
		{
			throw new UserDoesNotExistException();
		}
		User user = userFactory.retrieveUser(streetCred.getUserName(),streetCred.getPassword());
		AuthUser authUser = new AuthUser(user.getId(), user.getAuthLevel(), user.getUsername(), 20);
		return Response.ok(encryptor.encryptUser(authUser, "User " + streetCred.getUserName() + " has updated thier password.")).build();
	}
}
