package edu.neumont.csc380.auth.Authorization;

import java.awt.image.BufferedImage;
import java.io.File;
import java.io.IOException;
import java.io.UnsupportedEncodingException;
import java.util.Date;

import javax.imageio.ImageIO;
import javax.ws.rs.core.Response;

import org.apache.cxf.common.util.Base64Exception;
import org.apache.cxf.common.util.Base64Utility;

import edu.neumont.csc380.exceptions.ExpiredTokenException;
import edu.neumont.csc380.exceptions.InvalidTokenException;
import edu.neumont.csc380.hello.service.AuthTokenV1;
import edu.neumont.csc380.hello.service.AuthUser;
import edu.neumont.csc380.hello.service.PayLoad;

public class Encryptor {
	private final static String ID_STRING = "ID:";
	private final static String AUTH_STRING = ";AUTH:";
	
	public static PayLoad encryptUser(AuthUser user,Response response) throws IOException
	{
		int gioValue = calculateGioValue(response);
		String encode = Base64Utility.encode((ID_STRING + user.getId() + AUTH_STRING + user.getAuthorityLevel()).getBytes());
		AuthTokenV1 token = new AuthTokenV1(encode,gioValue);
		PayLoad payLoad = new PayLoad(token,response);
		return payLoad;
	}
	
	private static int calculateGioValue(Response response) throws IOException
	{
		final String IMAGE_PATH = "../../GioImage.jpg";
		final BufferedImage gioImage = ImageIO.read(new File(IMAGE_PATH));
		int gioValue = response.getLength();
		gioValue %= gioImage.getHeight() * gioImage.getWidth();
		gioValue = gioImage.getRGB(gioValue / gioImage.getHeight(), gioValue % gioImage.getWidth());
		return gioValue;
	}
	
	public static AuthUser DecryptCredentials(PayLoad payLoad) throws ExpiredTokenException, InvalidTokenException, IOException
	{
		AuthTokenV1 token = payLoad.getToken();
		checkExpiry(token.getExpiry());
		checkGio(token.getGioValue(), payLoad.getPayLoad());
		try {
			String decrypt = new String(Base64Utility.decode(token.getToken()),"UTF8");
			String[] values = decrypt.split(AUTH_STRING);
			if(values.length != 2)
			{
				throw new InvalidTokenException();
			}
			int id = Integer.parseInt(values[0].replace(ID_STRING, ""));
			AuthorityLevel authority = Enum.valueOf(AuthorityLevel.class, values[1]);
			return new AuthUser(id, authority);
		} catch (UnsupportedEncodingException | Base64Exception | IllegalArgumentException e) {
			throw new InvalidTokenException();
		}
	}
	
	private static void checkGio(int gio,Response response) throws InvalidTokenException, IOException
	{
		if(gio != calculateGioValue(response))
		{
			throw new InvalidTokenException();
		}
	}
	
	private static void checkExpiry(Date expiry) throws ExpiredTokenException
	{
		Date now = new Date();
		if(expiry.after(now))
		{
			throw new ExpiredTokenException();
		}
	}
}
